apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'signing'
apply plugin: 'maven'

group 'org.scassandra'
jar.baseName = 'java-client'

compileJava {
    sourceCompatibility = "1.6"
    targetCompatibility = "1.6"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url "https://oss.sonatype.org/content/groups/staging"
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourceJar
}

signing {
    sign configurations.archives
}


uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword )
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            pom.artifactId = 'java-client'

            pom.project {
                name 'Scassandra Java Client'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Allows Java applications to use Scassandra'
                url 'https://github.com/chbatey/scassandra-java-client'

                scm {
                    connection 'scm:git:git@github.com:chbatey/scassandra-java-client.git'
                    developerConnection 'scm:git:git@github.com:chbatey/scassandra-java-client.git'
                    url 'https://github.com/chbatey/scassandra-java-client'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'chbatey'
                        name 'Christopher Batey'
                        email 'christopher.batey@gmail.com'
                    }
                    developer {
                        id 'apojha'
                        name 'Alexandra Ojha'
                        email 'alexojha@gmail.com'
                    }
                }
            }
        }
    }
}



dependencies {
    compile('org.scassandra:scassandra-server_2.10:0.2-SNAPSHOT')
    compile 'org.apache.httpcomponents:httpclient:4.3.3'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'org.slf4j:slf4j-api:1.7.6'
    compile 'junit:junit:4.11'
    testCompile 'ch.qos.logback:logback-classic:1.1.1'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'org.powermock:powermock-mockito-release-full:1.5'
    testCompile 'com.github.tomakehurst:wiremock:1.46'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:1.4.1'
    testCompile "com.googlecode.jarjar:jarjar:1.3"
    testCompile('com.datastax.cassandra:cassandra-driver-core:2+')
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

task jarAll(type: Jar, dependsOn: jar) {
    inputs.files jar.archivePath
    appendix = 'standalone'
    def metaInfDir = "$buildDir/tmp/manifest"
    def jar = project.tasks.jar
    String fileName = jar.archiveName - ("." + jar.extension) + "-standalone." + jar.extension
    File jarFile = new File(jar.destinationDir, fileName)
    doFirst {
        manifest.writeTo("${metaInfDir}/MANIFEST.MF")
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.testCompile.asPath
            jarjar(jarfile: jarFile, manifest: "${metaInfDir}/MANIFEST.MF") {
                zipfileset(src: jar.archivePath)

                configurations.compile.files.findAll { !it.name.contains("junit") }.each {
                    zipfileset(src: it)
                }
                rule pattern: "org.mortbay.**", result: "scassandra.org.mortbay.@1"
                rule pattern: "com.google.common.**", result: "scassandra.com.google.common.@1"
                rule pattern: "com.fasterxml.jackson.**", result: "scassandra.com.fasterxml.jackson.@1"
                rule pattern: "org.apache.http.**", result: "scassandra.org.apache.http.@1"
                rule pattern: "org.apache.commons.**", result: "scassandra.org.apache.commons.@1"
                rule pattern: "com.google.code.gson.**", result: "scassandra.com.google.code.gson.@1"
            }
        }

        Date date = new Date()
        String name = jar.baseName
        project.artifacts.add('archives',
                [
                        getClassifier: { -> "standalone" },
                        getDate: {-> date },
                        getExtension: {-> "jar" },
                        getType: {-> "jar" },
                        getFile: {-> jarFile },
                        getName: {-> name }
                ] as PublishArtifact
        )
    }
}


install.dependsOn jarAll
uploadArchives.dependsOn jarAll


